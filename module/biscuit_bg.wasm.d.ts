/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_biscuitbuilder_free(a: number): void;
export function biscuitbuilder_new(): number;
export function biscuitbuilder_build(a: number, b: number, c: number): void;
export function biscuitbuilder_merge(a: number, b: number): void;
export function biscuitbuilder_addFact(a: number, b: number, c: number): void;
export function biscuitbuilder_addRule(a: number, b: number, c: number): void;
export function biscuitbuilder_addCheck(a: number, b: number, c: number): void;
export function biscuitbuilder_addCode(a: number, b: number, c: number, d: number): void;
export function biscuitbuilder_addCodeWithParameters(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function biscuitbuilder_toString(a: number, b: number): void;
export function __wbg_blockbuilder_free(a: number): void;
export function blockbuilder_new(): number;
export function blockbuilder_addFact(a: number, b: number, c: number): void;
export function blockbuilder_addRule(a: number, b: number, c: number): void;
export function blockbuilder_addCheck(a: number, b: number, c: number): void;
export function blockbuilder_addCode(a: number, b: number, c: number, d: number): void;
export function blockbuilder_addCodeWithParameters(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function blockbuilder_toString(a: number, b: number): void;
export function __wbg_fact_free(a: number): void;
export function fact_fromString(a: number, b: number, c: number): void;
export function fact_unboundParameters(a: number): number;
export function fact_set(a: number, b: number, c: number, d: number, e: number): void;
export function fact_toString(a: number, b: number): void;
export function __wbg_rule_free(a: number): void;
export function rule_fromString(a: number, b: number, c: number): void;
export function rule_unboundParameters(a: number): number;
export function rule_unboundScopeParameters(a: number): number;
export function rule_set(a: number, b: number, c: number, d: number, e: number): void;
export function rule_setScope(a: number, b: number, c: number, d: number, e: number): void;
export function rule_toString(a: number, b: number): void;
export function __wbg_check_free(a: number): void;
export function check_fromString(a: number, b: number, c: number): void;
export function check_unboundParameters(a: number): number;
export function check_unboundScopeParameters(a: number): number;
export function check_set(a: number, b: number, c: number, d: number, e: number): void;
export function check_setScope(a: number, b: number, c: number, d: number, e: number): void;
export function check_toString(a: number, b: number): void;
export function policy_fromString(a: number, b: number, c: number): void;
export function policy_set(a: number, b: number, c: number, d: number, e: number): void;
export function policy_setScope(a: number, b: number, c: number, d: number, e: number): void;
export function policy_toString(a: number, b: number): void;
export function __wbg_policy_free(a: number): void;
export function policy_unboundParameters(a: number): number;
export function policy_unboundScopeParameters(a: number): number;
export function __wbg_authorizer_free(a: number): void;
export function authorizer_new(): number;
export function authorizer_addToken(a: number, b: number, c: number): void;
export function authorizer_addFact(a: number, b: number, c: number): void;
export function authorizer_addRule(a: number, b: number, c: number): void;
export function authorizer_addCheck(a: number, b: number, c: number): void;
export function authorizer_addPolicy(a: number, b: number, c: number): void;
export function authorizer_merge(a: number, b: number): void;
export function authorizer_mergeBlock(a: number, b: number): void;
export function authorizer_addCode(a: number, b: number, c: number, d: number): void;
export function authorizer_addCodeWithParameters(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function authorizer_authorize(a: number, b: number): void;
export function authorizer_authorizeWithLimits(a: number, b: number, c: number): void;
export function authorizer_query(a: number, b: number, c: number): void;
export function authorizer_queryWithLimits(a: number, b: number, c: number, d: number): void;
export function authorizer_toString(a: number, b: number): void;
export function __wbg_biscuit_free(a: number): void;
export function biscuit_builder(): number;
export function biscuit_block_builder(): number;
export function biscuit_appendBlock(a: number, b: number, c: number): void;
export function biscuit_getAuthorizer(a: number, b: number): void;
export function biscuit_sealToken(a: number, b: number): void;
export function biscuit_fromBytes(a: number, b: number, c: number, d: number): void;
export function biscuit_fromBase64(a: number, b: number, c: number, d: number): void;
export function biscuit_toBytes(a: number, b: number): void;
export function biscuit_toBase64(a: number, b: number): void;
export function biscuit_getRevocationIdentifiers(a: number, b: number): void;
export function biscuit_countBlocks(a: number): number;
export function biscuit_getBlockSource(a: number, b: number, c: number): void;
export function biscuit_getThirdPartyRequest(a: number, b: number): void;
export function biscuit_appendThirdPartyBlock(a: number, b: number, c: number, d: number): void;
export function biscuit_toString(a: number, b: number): void;
export function __wbg_thirdpartyrequest_free(a: number): void;
export function thirdpartyrequest_fromBytes(a: number, b: number, c: number): void;
export function thirdpartyrequest_fromBase64(a: number, b: number, c: number): void;
export function thirdpartyrequest_toBytes(a: number, b: number): void;
export function thirdpartyrequest_toBase64(a: number, b: number): void;
export function thirdpartyrequest_createBlock(a: number, b: number, c: number, d: number): void;
export function __wbg_thirdpartyblock_free(a: number): void;
export function thirdpartyblock_fromBytes(a: number, b: number, c: number): void;
export function thirdpartyblock_fromBase64(a: number, b: number, c: number): void;
export function thirdpartyblock_toBytes(a: number, b: number): void;
export function thirdpartyblock_toBase64(a: number, b: number): void;
export function init(): void;
export function __wbg_keypair_free(a: number): void;
export function keypair_new(): number;
export function keypair_fromPrivateKey(a: number): number;
export function keypair_getPublicKey(a: number): number;
export function keypair_getPrivateKey(a: number): number;
export function __wbg_publickey_free(a: number): void;
export function publickey_toBytes(a: number, b: number, c: number, d: number, e: number): void;
export function publickey_toString(a: number, b: number): void;
export function publickey_toDatalogParameter(a: number, b: number): void;
export function publickey_fromBytes(a: number, b: number, c: number): void;
export function publickey_fromString(a: number, b: number, c: number): void;
export function __wbg_privatekey_free(a: number): void;
export function privatekey_toBytes(a: number, b: number, c: number, d: number, e: number): void;
export function privatekey_toString(a: number, b: number): void;
export function privatekey_fromBytes(a: number, b: number, c: number): void;
export function privatekey_fromString(a: number, b: number, c: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_start(): void;
